/** Declaration file generated by dts-gen */
declare module 'lance-gg' {
    export class CannonPhysicsEngine {
        constructor(options: any);
    
        addBox(x: any, y: any, z: any, mass: any, friction: any): any;
    
        addCylinder(radiusTop: any, radiusBottom: any, height: any, numSegments: any, mass: any): any;
    
        addSphere(radius: any, mass: any): any;
    
        removeObject(obj: any): void;
    
        step(dt: any, objectFilter: any): void;
    
    }
    
    export class DynamicObject {
        constructor(gameEngine: any, options: any, props: any);
    
        accelerate(acceleration: any): any;
    
        applyIncrementalBending(stepDesc: any): void;
    
        bendToCurrent(original: any, percent: any, worldSettings: any, isLocal: any, increments: any): void;
    
        bendingToString(): any;
    
        collidesWith(other: any): any;
    
        getAABB(): any;
    
        syncTo(other: any): void;
    
        toString(): any;
    
        turnLeft(deltaAngle: any): any;
    
        turnRight(deltaAngle: any): any;
    
        static netScheme: {
            angle: {
                type: string;
            };
            height: {
                type: string;
            };
            id: {
                type: string;
            };
            isStatic: {
                type: string;
            };
            playerId: {
                type: string;
            };
            position: {
                type: string;
            };
            velocity: {
                type: string;
            };
            width: {
                type: string;
            };
        };
    
    }
    
    export class GameEngine {
        constructor(options: any);
    
        addObjectToWorld(object: any): any;
    
        findLocalShadow(serverObj: any): any;
    
        getPlayerGameOverResult(): any;
    
        initWorld(worldSettings: any): void;
    
        isOwnedByPlayer(object: any): any;
    
        processInput(inputDesc: any, playerId: any, isServer: any): any;
    
        registerClasses(serializer: any): void;
    
        removeObjectFromWorld(objectId: any): any;
    
        start(): any;
    
        step(isReenact: any, t: any, dt: any, physicsOnly: any): any;
    
    }
    
    export class GameObject {
        constructor(gameEngine: any, options: any, props: any);
    
        addComponent(componentInstance: any): void;
    
        applyIncrementalBending(): void;
    
        bendToCurrent(original: any, bending: any, worldSettings: any, isLocal: any, bendingIncrements: any): void;
    
        bendToCurrentState(bending: any, worldSettings: any, isLocal: any, bendingIncrements: any): void;
    
        bendingToString(): any;
    
        destroy(): void;
    
        getComponent(componentClass: any): any;
    
        hasComponent(componentClass: any): any;
    
        onAddToWorld(gameEngine: any): void;
    
        onRemoveFromWorld(gameEngine: any): void;
    
        refreshFromPhysics(): void;
    
        refreshToPhysics(): void;
    
        removeComponent(componentName: any): void;
    
        saveState(other: any): void;
    
        syncTo(other: any): void;
    
        toString(): any;
    
        static netScheme: {
            id: {
                type: string;
            };
            playerId: {
                type: string;
            };
        };
    
    }
    
    export class GameWorld {
        constructor();
    
        addObject(object: any): void;
    
        forEachObject(callback: any): void;
    
        getNewId(): any;
    
        queryObject(query: any): any;
    
        queryObjects(query: any): any;
    
        removeObject(id: any): void;
    
    }
    
    export class P2PhysicsEngine {
        constructor(options: any);
    
        addBox(width: any, height: any, mass: any): any;
    
        addCircle(radius: any, mass: any): any;
    
        removeObject(obj: any): void;
    
        step(dt: any, objectFilter: any): void;
    
    }
    
    export class PhysicalObject2D {
        constructor(gameEngine: any, options: any, props: any);
    
        applyIncrementalBending(stepDesc: any): void;
    
        bendToCurrent(original: any, percent: any, worldSettings: any, isLocal: any, increments: any): void;
    
        bendingToString(): any;
    
        copyVector(source: any, target: any): void;
    
        interpolate(nextObj: any, percent: any): void;
    
        onAddToWorld(): void;
    
        refreshFromPhysics(): void;
    
        refreshToPhysics(): void;
    
        syncTo(other: any, options: any): void;
    
        toString(): any;
    
        static netScheme: {
            angle: {
                type: string;
            };
            angularVelocity: {
                type: string;
            };
            id: {
                type: string;
            };
            mass: {
                type: string;
            };
            playerId: {
                type: string;
            };
            position: {
                type: string;
            };
            velocity: {
                type: string;
            };
        };
    
    }
    
    export class PhysicalObject3D {
        constructor(gameEngine: any, options: any, props: any);
    
        applyIncrementalBending(stepDesc: any): void;
    
        bendToCurrent(original: any, percent: any, worldSettings: any, isLocal: any, increments: any): void;
    
        bendingToString(): any;
    
        interpolate(nextObj: any, percent: any): void;
    
        refreshFromPhysics(): void;
    
        refreshToPhysics(): void;
    
        syncTo(other: any, options: any): void;
    
        toString(): any;
    
        static netScheme: {
            angularVelocity: {
                type: string;
            };
            id: {
                type: string;
            };
            playerId: {
                type: string;
            };
            position: {
                type: string;
            };
            quaternion: {
                type: string;
            };
            velocity: {
                type: string;
            };
        };
    
    }
    
    export class Quaternion {
        constructor(w: any, x: any, y: any, z: any);
    
        conjugate(): any;
    
        copy(sourceObj: any): any;
    
        multiply(other: any): any;
    
        normalize(): any;
    
        set(w: any, x: any, y: any, z: any): any;
    
        setFromAxisAngle(axis: any, angle: any): any;
    
        slerp(target: any, bending: any): any;
    
        toAxisAngle(): any;
    
        toString(): any;
    
        static netScheme: {
            w: {
                type: string;
            };
            x: {
                type: string;
            };
            y: {
                type: string;
            };
            z: {
                type: string;
            };
        };
    
    }
    
    export class ServerEngine {
        constructor(io: any, gameEngine: any, options: any);
    
        assignObjectToRoom(obj: any, roomName: any): void;
    
        assignPlayerToRoom(playerId: any, roomName: any): any;
    
        createRoom(roomName: any): void;
    
        gameStatus(): any;
    
        getPlayerId(socket: any): void;
    
        onObjectAdded(obj: any): void;
    
        onObjectDestroyed(obj: any): void;
    
        onPlayerConnected(socket: any): void;
    
        onPlayerDisconnected(socketId: any, playerId: any): void;
    
        onPlayerTimeout(socket: any): void;
    
        onReceivedInput(data: any, socket: any): void;
    
        queueInputForPlayer(data: any, playerId: any): void;
    
        resetIdleTimeout(socket: any): void;
    
        serializeUpdate(roomName: any, options: any): any;
    
        start(): void;
    
        step(): void;
    
        syncStateToClients(roomName: any): any;
    
    }
    
    export class SimplePhysicsEngine {
        constructor(options: any);
    
        objectStep(o: any, dt: any): void;
    
        step(dt: any, objectFilter: any): void;
    
    }
    
    export class ThreeVector {
        constructor(x: any, y: any, z: any);
    
        add(other: any): any;
    
        clone(): any;
    
        copy(sourceObj: any): any;
    
        getBendingDelta(target: any, options: any): any;
    
        length(): any;
    
        lerp(target: any, p: any): any;
    
        multiplyScalar(s: any): any;
    
        normalize(): any;
    
        set(x: any, y: any, z: any): any;
    
        subtract(other: any): any;
    
        toString(): any;
    
        static netScheme: {
            x: {
                type: string;
            };
            y: {
                type: string;
            };
            z: {
                type: string;
            };
        };
    
    }
    
    export class TwoVector {
        constructor(x: any, y: any);
    
        add(other: any): any;
    
        clone(): any;
    
        copy(sourceObj: any): any;
    
        getBendingDelta(target: any, options: any): any;
    
        length(): any;
    
        lerp(target: any, p: any): any;
    
        multiply(other: any): any;
    
        multiplyScalar(s: any): any;
    
        normalize(): any;
    
        set(x: any, y: any): any;
    
        subtract(other: any): any;
    
        toString(): any;
    
        static netScheme: {
            x: {
                type: string;
            };
            y: {
                type: string;
            };
        };
    
    }
    
    export function BaseTypes(): void;
    
    export namespace BaseTypes {
        const TYPES: {
            CLASSINSTANCE: string;
            FLOAT32: string;
            INT16: string;
            INT32: string;
            INT8: string;
            LIST: string;
            STRING: string;
            UINT8: string;
        };
    
    }
    
    export namespace Lib {
        class Trace {
            constructor(options: any);
    
            rotate(): any;
    
            setStep(s: any): void;
    
            trace(level: any, dataCB: any): void;
    
            static TRACE_ALL: number;
    
            static TRACE_DEBUG: number;
    
            static TRACE_ERROR: number;
    
            static TRACE_INFO: number;
    
            static TRACE_NONE: number;
    
            static TRACE_WARN: number;
    
        }
    
    }
}

